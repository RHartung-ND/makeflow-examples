
{
  "define":
    {
      "SPLITS":10,
      "SLICES":10,
      "GRANULARITY":40000,
      "BWA":"./bwa",
      "REF":"oak2.fa",
      "REF_INDEX":
        [
          "oak2.fa."+x for x in ["amb","ann","bwt","sa","pac"]
        ],
      "SPLIT_ALIGN":"gatk_split_align",
      "SAMTOOLS":"./samtools",
      "PICARD":"picard.jar",
      "GATK":"GenomeAnalysisTK.jar",
      "ORGANISMS":
        [
          "10001",
          "10012",
          "10024",
          "10034",
          "10045",
          "10062",
          "10081",
          "10002",
          "10015",
          "10025",
          "10036",
          "10046",
          "10072",
          "10082",
          "10003",
          "10016",
          "10026",
          "10037",
          "10048",
          "10074",
          "10004",
          "10017",
          "10027",
          "10039",
          "10049",
          "10075",
          "10005",
          "10018",
          "10028",
          "10040",
          "10050",
          "10076",
          "10006",
          "10019",
          "10029",
          "10041",
          "10051",
          "10077",
          "10007",
          "10021",
          "10030",
          "10042",
          "10060",
          "10078",
          "10009",
          "10023",
          "10031",
          "10044",
          "10061",
          "10079"
        ]
    },
  "rules":
    [
      
      {
        "command":template("{BWA} aln {REF} SM{x}.fq > SM{x}.sai 2> SM{x}.sai.err"),
        "inputs":
          [
            BWA,
            REF,
            y for y in REF_INDEX,
            template("SM{x}.fq")
          ],
        "outputs":
          [
            template("SM{x}.sai"),
            template("SM{x}.sai.err")
          ]
      } for x in ORGANISMS[:SPLITS],
      
      {
        "command":template("{BWA} samse {REF} SM{x}.sai SM{x}.fq > SM{x}.sam 2> SM{x}.sam.err"),
        "inputs":
          [
            BWA,
            REF,
            y for y in REF_INDEX,
            template("SM{x}.fq"),
            template("SM{x}.sai")
          ],
        "outputs":
          [
            template("SM{x}.sam"),
            template("SM{x}.sam.err")
          ]
      } for x in ORGANISMS[:SPLITS],
      
      {
        "command":template("perl {SPLIT_ALIGN} {GRANULARITY} {REF} SM{x}.sam 2> SM{x}_split.sam.err"),
        "inputs":
          [
            SPLIT_ALIGN,
            REF,
            template("SM{x}.sam")
          ],
        "outputs":
          [
            template("SM{x}_split.sam.err"),
            template("SM{x}.{i}.sam") for i in range(SLICES)
          ]
      } for x in ORGANISMS[:SPLITS],
      
      {
        "command":template("{SAMTOOLS} view -bS SM{x}.{n}.sam > SM{x}.{n}.bam 2> SM{x}.{n}.bam.err"),
        "inputs":
          [
            SAMTOOLS,
            template("SM{x}.{n}.sam")
          ],
        "outputs":
          [
            template("SM{x}.{n}.bam"),
            template("SM{x}.{n}.bam.err")
          ]
      } for x in ORGANISMS[:SPLITS] for n in range(SLICES),
      
      {
        "command":template("java -Xmx8g -jar {PICARD} SortSam INPUT=SM{x}.{n}.bam OUTPUT=SM{x}.{n}.sort.bam SORT_ORDER=coordinate VALIDATION_STRINGENCY=LENIENT 2> SM{x}.{n}.sort.bam.err"),
        "inputs":
          [
            PICARD,
            template("SM{x}.{n}.bam")
          ],
        "outputs":
          [
            template("SM{x}.{n}.sort.bam"),
            template("SM{x}.{n}.sort.bam.err")
          ]
      } for x in ORGANISMS[:SPLITS] for n in range(SLICES),
      
      {
        "command":template("java -Xmx8g -jar {PICARD} AddOrReplaceReadGroups INPUT=SM{x}.{n}.sort.bam OUTPUT=SM{x}.{n}_RG.sort.bam RGID=RG1 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=SM{x} VALIDATION_STRINGENCY=LENIENT 2> SM{x}.{n}_RG.sort.bam.err"),
        "inputs":
          [
            PICARD,
            template("SM{x}.{n}.sort.bam")
          ],
        "outputs":
          [
            template("SM{x}.{n}_RG.sort.bam"),
            template("SM{x}.{n}_RG.sort.bam.err")
          ]
      } for x in ORGANISMS[:SPLITS] for n in range(SLICES),
      
      {
        "command":template("java -Xmx8g -jar {PICARD} BuildBamIndex INPUT=SM{x}.{n}_RG.sort.bam VALIDATION_STRINGENCY=LENIENT 2> SM{x}.{n}_RG.sort.bai.err"),
        "inputs":
          [
            PICARD,
            template("SM{x}.{n}_RG.sort.bam")
          ],
        "outputs":
          [
            template("SM{x}.{n}_RG.sort.bai"),
            template("SM{x}.{n}_RG.sort.bai.err")
          ]
      } for x in ORGANISMS[:SPLITS] for n in range(SLICES),
      
      {
        "command":template("java -jar {PICARD} CreateSequenceDictionary R=oak2.{n}.fa O=oak2.{n}.dict 2> oak2.{n}.dict.err"),
        "inputs":
          [
            PICARD,
            template("oak2.{n}.fa")
          ],
        "outputs":
          [
            template("oak2.{n}.dict"),
            template("oak2.{n}.dict.err")
          ]
      } for n in range(SLICES),
      
      {
        "command":template("{SAMTOOLS} faidx oak2.{n}.fa 2> oak2.{n}.fa.fai.err"),
        "inputs":
          [
            SAMTOOLS,
            template("oak2.{n}.fa")
          ],
        "outputs":
          [
            template("oak2.{n}.fa.fai"),
            template("oak2.{n}.fa.fai.err")
          ]
      } for n in range(SLICES),
      
      {
        "command":template("java -Xmx8g -jar {GATK} -T HaplotypeCaller -R oak2.{n}.fa -I SM{x}.{n}_RG.sort.bam -o SM{x}.{n}.vcf --fix_misencoded_quality_scores 2> SM{x}.{n}.vcf.err"),
        "inputs":
          [
            GATK,
            template("oak2.{n}.fa"),
            template("oak2.{n}.fa.fai"),
            template("oak2.{n}.dict"),
            template("SM{x}.{n}_RG.sort.bai"),
            template("SM{x}.{n}_RG.sort.bam")
          ],
        "outputs":
          [
            template("SM{x}.{n}.vcf"),
            template("SM{x}.{n}.vcf.err")
          ]
      } for x in ORGANISMS[:SPLITS] for n in range(SLICES)
    ]
}
